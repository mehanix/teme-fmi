parametri2 <- parseaza_expresie(expresie2)
op1 <- parametri1[2]
op2 <- parametri2[2]
bound1 <- parametri1[3]
bound2 <- parametri2[3]
# am formula P(a depinde de b) = P(a intersectat b)/P(b)
# calculez cdf pentru fiecare functie si iau pe cazuri
ans1 <- evalueaza(op1, bound1)
ans2 <- evalueaza(op2, bound2)
# daca vreuna e 0, intersectia va da 0
if(ans1 == 0)
return(0);
if(ans2 == 0)
return ("Cannot divide by zero")
## cazuri
## caz in care conditionarea face probabilitatea sa fie imposibila
# p(x < 3 | x > 5) = 0
if (op1 %in% c("<=","<") && op2 %in% c(">=", ">") && bound1 >=bound2)
return (0);
# p(x > 5 | x < 3) = 0
if (op1 %in% c(">=",">") && op2 %in% c("<=", "<") && bound1 >=bound2)
return (0);
## caz in care am acelasi fel de operator, facand intersectia defapt doar aleg intervalul cel mai restrans
# p(x> 3 | x>7) => iau (-inf,3)
if(op1 %in% c(">=",">") && op2 %in% c(">=",">"))
if(bound1 > bound2)
return (ans1/ans2)
else return (1);
# p( x<3 | x<7) => iau (-inf,3)
if(op1 %in% c("<=","<") && op2 %in% c("<=","<"))
if(bound1 < bound2)
return (ans1/ans2)
else return (1)
## daca nu e niciunul de mai sus, e intersectie de forma x > 5 | x < 7 si fac diferenta
## din cdf mai mare scad cdf mai mic si mi da bucata de dintre => intersectia
return ((cdf(compute_bound(bound2))-cdf(compute_bound(bound1)))/ans2)
}
# parsez parametri
parti = unlist(strsplit(p, "|", fixed = TRUE))
len = paste(length(parti))
switch(len,
"0" = return("Eroare"),
"1" = return(prob_independenta(p)),
"2" = return(prob_conditionata(parti[1],parti[2])),
)
return ("eroare");
}
# Example:
g <- function (x) {
fun <- 0.1*(3*(x^2) + 1)
fun[x<0] = 0
fun[x>2]=0
return ( fun )
}
h <- function(x)(dunif(x))
myP(g,"x>1|x<1.5") # 0.5897078
myP(h,"x>0.6") # 0.4
library(pracma)
### Cerinta 6: Calculul mediei și dispersiei unei variabile aleatoare g(X), unde X are o repartiție continuă cunoscută
## iar g este o funcție continuă precizată de utilizator.
median_and_dispersion <- function(g, fx, domeniu_valori) {
# y = g(X) e o noua variabila aleatoare, ii calculez media
# folosesc formula pt media functiilor de x
e_y <- integral(Vectorize(function(x){g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
# pt dispersie, mai folosesc o data formula mediei functiilor de x
# pentru a afla X^2
e_y2 <- integral(Vectorize(function(x){x^2 * g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
dispersie <- e_y2 - e_y^2
print(paste("Media: ",e_y))
print(paste("Dispersia:", dispersie))
}
# Example
f1 <- function(x)(x^2)
f2 <- function(x) (1 * exp(1)^(-1 * x))
median_and_dispersion(f1,f2, c(0,Inf)) # 2, 20
library(pracma)
# suma a doua variabile aleatoare continue independente folosind formula de convolutie
convolution_sum <- function(fx,fy) {
function(z) {
integrate(function(y) {
fx(z-y) * fy(y)
},-Inf,Inf)
} $ value
}
# diferenta a doua variabile aleatoare continue independente folosind formula de convolutie
convolution_diff <- function(fx,fy) {
function(z) {
integrate(function(y) {
fx(y-z)*fy(y)
},-Inf,Inf)
} $ value
}
# Example:
f_1 <- function(x)(dnorm(x,mean=1))
f_2 <- function(x) (dnorm(x,mean=2))
f_3 <- Vectorize(convolution_sum(f_1, f_2))
f_4 <- Vectorize(convolution_diff(f_1,f_2))
plot(f_1,from=-5,to=6,type="l")
plot(f_2,from=-5,to=6,type="l")
plot(f_3,from=-5,to=6,type="l")
plot(f_4,from=-5,to=6,type="l")
library(pracma)
# suma a doua variabile aleatoare continue independente folosind formula de convolutie
convolution_sum <- function(fx,fy) {
function(z) {
integrate(function(y) {
fx(z-y) * fy(y)
},-Inf,Inf)
} $ value
}
# diferenta a doua variabile aleatoare continue independente folosind formula de convolutie
convolution_diff <- function(fx,fy) {
function(z) {
integrate(function(y) {
fx(y-z)*fy(y)
},-Inf,Inf)
} $ value
}
# Example:
f_1 <- function(x)(dnorm(x,mean=1))
f_2 <- function(x) (dnorm(x,mean=2))
f_3 <- Vectorize(convolution_sum(f_1, f_2))
f_4 <- Vectorize(convolution_diff(f_1,f_2))
plot(f_1,from=-5,to=6,type="l")
plot(f_2,from=-5,to=6,type="l")
plot(f_3,from=-5,to=6,type="l")
plot(f_4,from=-5,to=6,type="l")
library(pracma)
# suma a doua variabile aleatoare continue independente folosind formula de convolutie
convolution_sum <- function(fx,fy) {
function(z) {
integrate(function(y) {
fx(z-y) * fy(y)
},-Inf,Inf)
} $ value
}
# diferenta a doua variabile aleatoare continue independente folosind formula de convolutie
convolution_diff <- function(fx,fy) {
function(z) {
integrate(function(y) {
fx(y-z)*fy(y)
},-Inf,Inf)
} $ value
}
# Example:
f_1 <- function(x)(dnorm(x,mean=1))
f_2 <- function(x) (dnorm(x,mean=2))
f_3 <- Vectorize(convolution_sum(f_1, f_2))
f_4 <- Vectorize(convolution_diff(f_1,f_2))
plot(f_1,from=-5,to=6,type="l")
plot(f_2,from=-5,to=6,type="l")
plot(f_3,from=-5,to=6,type="l")
plot(f_4,from=-5,to=6,type="l")
####
# Cerinta: Crearea unei funcții P care permite calculul diferitelor tipuri de
# probabilități asociate unei variabile aleatoare continue(similar funcției P din pachetul discreteRV)
#
# Header functie: myP(f, p)
#    - unde f este o functie densitate de probabilitate (pdf)
#    - iar p este un string ce reprezinta probabilitatea (conditionata sau independenta).
#
# Obligatoriu, var se va afla in stanga operatorului
####
myP <- function(f, p) {
operatii_posibile=c("<=",">=","=","<",">")
# transforma string-ul dat in ceva ce pot utiliza
parseaza_expresie <- function(expresie) {
# scot whitespace
expresie <- gsub(" ", "", expresie)
for(op in operatii_posibile) {
# am dat split corect => in stanga am variabila, in dreapta am bound-ul
split <- unlist(strsplit(expresie, op, fixed = TRUE))
splitSize <- length(split)
if (splitSize == 2) {
# returnez (v.a.c, operatie, bound)
return (c(split[1],op,split[2]))
}
}
return(c(-1))
}
# calculez cdf, adica integrala -inf, bound, adica P(X <= bound)
cdf <- function(bound) { return (integrate(f, -Inf, bound) $ value)}
# transform din string in double
compute_bound <-function(bound) {
rez <- switch(bound,
"-Inf" = -Inf,
"+Inf" = +Inf,
as.double(bound))
return (rez)
}
## Calculeaza probabilitatea ##
evalueaza <- function(operator, bound) {
# parsez bound-ul, transform in double sau in +-inf
bound = compute_bound(bound)
integrala <- cdf(bound)
#pentru >,>= din toata aria(1) scad cdf-ul si obtin restul
ans <- switch(
operator,
"=" = 0,
"<=" = integrala,
"<" = integrala,
">=" = 1 - integrala,
">" = 1 - integrala)
return(ans)
}
# daca am o singura expresie e prob independenta
prob_independenta <- function(expresie) {
# scot parametri din expresie
parametri <- parseaza_expresie(expresie)
if(length(parametri) != 3)
return("Eroare la parsarea probabilitatii")
# aici presupun ca expresiile mele sunt mereu de forma x operator bound
# ar trebui o verificare, poate, a ordinii
operator <- parametri[2]
bound <- parametri[3]
print(evalueaza(operator, bound))
}
#daca am 2 expresii e prob conditionata
prob_conditionata <- function(expresie1, expresie2) {
# scot parametri in variabile ca sa fie readable ce fac mai jos
parametri1 <- parseaza_expresie(expresie1)
parametri2 <- parseaza_expresie(expresie2)
op1 <- parametri1[2]
op2 <- parametri2[2]
bound1 <- parametri1[3]
bound2 <- parametri2[3]
# am formula P(a depinde de b) = P(a intersectat b)/P(b)
# calculez cdf pentru fiecare functie si iau pe cazuri
ans1 <- evalueaza(op1, bound1)
ans2 <- evalueaza(op2, bound2)
# daca vreuna e 0, intersectia va da 0
if(ans1 == 0)
return(0);
if(ans2 == 0)
return ("Cannot divide by zero")
## cazuri
## caz in care conditionarea face probabilitatea sa fie imposibila
# p(x < 3 | x > 5) = 0
if (op1 %in% c("<=","<") && op2 %in% c(">=", ">") && bound1 >=bound2)
return (0);
# p(x > 5 | x < 3) = 0
if (op1 %in% c(">=",">") && op2 %in% c("<=", "<") && bound1 >=bound2)
return (0);
## caz in care am acelasi fel de operator, facand intersectia defapt doar aleg intervalul cel mai restrans
# p(x> 3 | x>7) => iau (-inf,3)
if(op1 %in% c(">=",">") && op2 %in% c(">=",">"))
if(bound1 > bound2)
return (ans1/ans2)
else return (1);
# p( x<3 | x<7) => iau (-inf,3)
if(op1 %in% c("<=","<") && op2 %in% c("<=","<"))
if(bound1 < bound2)
return (ans1/ans2)
else return (1)
## daca nu e niciunul de mai sus, e intersectie de forma x > 5 | x < 7 si fac diferenta
## din cdf mai mare scad cdf mai mic si mi da bucata de dintre => intersectia
return ((cdf(compute_bound(bound2))-cdf(compute_bound(bound1)))/ans2)
}
# parsez parametri
parti = unlist(strsplit(p, "|", fixed = TRUE))
len = paste(length(parti))
switch(len,
"0" = return("Eroare"),
"1" = return(prob_independenta(p)),
"2" = return(prob_conditionata(parti[1],parti[2])),
)
return ("eroare");
}
# Example:
g <- function (x) {
fun <- 0.1*(3*(x^2) + 1)
fun[x<0] = 0
fun[x>2]=0
return ( fun )
}
h <- function(x)(dunif(x))
myP(g,"x>1|x<1.5") # 0.5897078
myP(h,"x>0.6") # 0.4
library(pracma)
### Cerinta 6: Calculul mediei și dispersiei unei variabile aleatoare g(X), unde X are o repartiție continuă cunoscută
## iar g este o funcție continuă precizată de utilizator.
median_and_dispersion <- function(g, fx, domeniu_valori) {
# y = g(X) e o noua variabila aleatoare, ii calculez media
# folosesc formula pt media functiilor de x
e_y <- integral(Vectorize(function(x){g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
# pt dispersie, mai folosesc o data formula mediei functiilor de x
# pentru a afla X^2
e_y2 <- integral(Vectorize(function(x){x^2 * g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
dispersie <- e_y2 - e_y^2
print(paste("Media: ",e_y))
print(paste("Dispersia:", dispersie))
}
# Example
f1 <- function(x)(x^2)
f2 <- function(x) (1 * exp(1)^(-1 * x))
median_and_dispersion(f1,f2, c(0,Inf)) # 2, 20
library(pracma)
### Cerinta 6: Calculul mediei și dispersiei unei variabile aleatoare g(X), unde X are o repartiție continuă cunoscută
## iar g este o funcție continuă precizată de utilizator.
median_and_dispersion <- function(g, fx, domeniu_valori) {
# y = g(X) e o noua variabila aleatoare, ii calculez media
# folosesc formula pt media functiilor de x
e_y <- integral(Vectorize(function(x){g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
# pt dispersie, mai folosesc o data formula mediei functiilor de x
# pentru a afla X^2
e_y2 <- integral(Vectorize(function(x){x^2 * g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
dispersie <- e_y2 - e_y^2
dispersie2 <- integral(Vectorize(function(x){(x- e_y)^2}),domeniu_valori[1],domeniu_valori[2])
print(paste("Media: ",e_y))
print(paste("Dispersia:", dispersie2))
}
# Example
# f1 <- function(x)(x^2)
# f2 <- function(x) (1 * exp(1)^(-1 * x))
# median_and_dispersion(f1,f2, c(0,Inf)) # 2, 20
library(pracma)
### Cerinta 6: Calculul mediei și dispersiei unei variabile aleatoare g(X), unde X are o repartiție continuă cunoscută
## iar g este o funcție continuă precizată de utilizator.
median_and_dispersion <- function(g, fx, domeniu_valori) {
# y = g(X) e o noua variabila aleatoare, ii calculez media
# folosesc formula pt media functiilor de x
e_y <- integral(Vectorize(function(x){g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
# pt dispersie, mai folosesc o data formula mediei functiilor de x
# pentru a afla X^2
e_y2 <- integral(Vectorize(function(x){x^2 * g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
dispersie <- e_y2 - e_y^2
dispersie2 <- integral(Vectorize(function(x){(x- e_y)^2}),domeniu_valori[1],domeniu_valori[2])
print(paste("Media: ",e_y))
print(paste("Dispersia:", dispersie2))
}
# Example
f1 <- function(x)(x^2)
f2 <- function(x) (1 * exp(1)^(-1 * x))
median_and_dispersion(f1,f2, c(0,Inf)) # 2, 20
library(pracma)
### Cerinta 6: Calculul mediei și dispersiei unei variabile aleatoare g(X), unde X are o repartiție continuă cunoscută
## iar g este o funcție continuă precizată de utilizator.
median_and_dispersion <- function(g, fx, domeniu_valori) {
# y = g(X) e o noua variabila aleatoare, ii calculez media
# folosesc formula pt media functiilor de x
e_y <- integral(Vectorize(function(x){g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
# pt dispersie, mai folosesc o data formula mediei functiilor de x
# pentru a afla X^2
e_y2 <- integral(Vectorize(function(x){x^2 * g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
dispersie <- e_y2 - e_y^2
dispersie2 <- integral(Vectorize(function(x){(x- e_y)^2}),domeniu_valori[1],domeniu_valori[2])
print(paste("Media: ",e_y))
print(paste("Dispersia:", dispersie2))
}
# Example
f1 <- function(x)(x^2)
f2 <- function(x) (1 * exp(1)^(-1 * x))
median_and_dispersion(f1,f2, c(0,Inf)) # 2, 20
library(pracma)
### Cerinta 6: Calculul mediei și dispersiei unei variabile aleatoare g(X), unde X are o repartiție continuă cunoscută
## iar g este o funcție continuă precizată de utilizator.
median_and_dispersion <- function(g, fx, domeniu_valori) {
# y = g(X) e o noua variabila aleatoare, ii calculez media
# folosesc formula pt media functiilor de x
e_y <- integral(Vectorize(function(x){g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
# pt dispersie, mai folosesc o data formula mediei functiilor de x
# pentru a afla X^2
e_y2 <- integral(Vectorize(function(x){x^2 * g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
dispersie <- e_y2 - e_y^2
dispersie2 <- integral(Vectorize(function(x){(x- e_y)^2}),domeniu_valori[1],domeniu_valori[2])
print(paste("Media: ",e_y))
print(paste("Dispersia:", dispersie))
}
# Example
f1 <- function(x)(x^2)
f2 <- function(x) (1 * exp(1)^(-1 * x))
median_and_dispersion(f1,f2, c(0,Inf)) # 2, 20
library(pracma)
### Cerinta 6: Calculul mediei și dispersiei unei variabile aleatoare g(X), unde X are o repartiție continuă cunoscută
## iar g este o funcție continuă precizată de utilizator.
median_and_dispersion <- function(g, fx, domeniu_valori) {
# y = g(X) e o noua variabila aleatoare, ii calculez media
# folosesc formula pt media functiilor de x
e_y <- integral(Vectorize(function(x){g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
# pt dispersie, mai folosesc o data formula mediei functiilor de x
# pentru a afla X^2
e_y2 <- integral(Vectorize(function(x){x^2 * g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
dispersie <- e_y2 - e_y^2
dispersie2 <- integral(Vectorize(function(x){(x- e_y)^2}),domeniu_valori[1],domeniu_valori[2])
print(paste("Media: ",e_y))
print(paste("Dispersia:", dispersie))
print(paste("Dispersie2:", dispersie2))
}
# Example
f1 <- function(x)(x^2)
f2 <- function(x) (1 * exp(1)^(-1 * x))
median_and_dispersion(f1,f2, c(0,Inf)) # 2, 20
library(pracma)
### Cerinta 6: Calculul mediei și dispersiei unei variabile aleatoare g(X), unde X are o repartiție continuă cunoscută
## iar g este o funcție continuă precizată de utilizator.
median_and_dispersion <- function(g, fx, domeniu_valori) {
# y = g(X) e o noua variabila aleatoare, ii calculez media
# folosesc formula pt media functiilor de x
e_y <- integral(Vectorize(function(x){g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
# pt dispersie, mai folosesc o data formula mediei functiilor de x
# pentru a afla X^2
e_y2 <- integral(Vectorize(function(x){x^2 * g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
dispersie <- e_y2 - e_y^2
dispersie2 <- integral(Vectorize(function(x){(x- e_y)^2}),domeniu_valori[1],domeniu_valori[2])
print(paste("Media: ",e_y))
print(paste("Dispersia:", dispersie))
print(paste("Dispersie2:", dispersie2))
}
# Example
f1 <- function(x)(x)
f2 <- function(x) (dnorm())
median_and_dispersion(f1,f2, c(0,Inf)) # 2, 20
library(pracma)
### Cerinta 6: Calculul mediei și dispersiei unei variabile aleatoare g(X), unde X are o repartiție continuă cunoscută
## iar g este o funcție continuă precizată de utilizator.
median_and_dispersion <- function(g, fx, domeniu_valori) {
# y = g(X) e o noua variabila aleatoare, ii calculez media
# folosesc formula pt media functiilor de x
e_y <- integral(Vectorize(function(x){g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
# pt dispersie, mai folosesc o data formula mediei functiilor de x
# pentru a afla X^2
e_y2 <- integral(Vectorize(function(x){x^2 * g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
dispersie <- e_y2 - e_y^2
dispersie2 <- integral(Vectorize(function(x){(x- e_y)^2}),domeniu_valori[1],domeniu_valori[2])
print(paste("Media: ",e_y))
print(paste("Dispersia:", dispersie))
print(paste("Dispersie2:", dispersie2))
}
# Example
f1 <- function(x)(x)
f2 <- function(x) (dnorm(x))
median_and_dispersion(f1,f2, c(0,Inf)) # 2, 20
library(pracma)
### Cerinta 6: Calculul mediei și dispersiei unei variabile aleatoare g(X), unde X are o repartiție continuă cunoscută
## iar g este o funcție continuă precizată de utilizator.
median_and_dispersion <- function(g, fx, domeniu_valori) {
# y = g(X) e o noua variabila aleatoare, ii calculez media
# folosesc formula pt media functiilor de x
e_y <- integral(Vectorize(function(x){g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
# pt dispersie, mai folosesc o data formula mediei functiilor de x
# pentru a afla X^2
e_y2 <- integral(Vectorize(function(x){x^2 * g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
dispersie <- e_y2 - e_y^2
dispersie2 <- integral(Vectorize(function(x){(x- e_y)^2}),domeniu_valori[1],domeniu_valori[2])
print(paste("Media: ",e_y))
print(paste("Dispersia:", dispersie))
print(paste("Dispersie2:", dispersie2))
}
# Example
f1 <- function(x)(1)
f2 <- function(x) (dnorm(x))
median_and_dispersion(f1,f2, c(0,Inf)) # 2, 20
library(pracma)
### Cerinta 6: Calculul mediei și dispersiei unei variabile aleatoare g(X), unde X are o repartiție continuă cunoscută
## iar g este o funcție continuă precizată de utilizator.
median_and_dispersion <- function(g, fx, domeniu_valori) {
# y = g(X) e o noua variabila aleatoare, ii calculez media
# folosesc formula pt media functiilor de x
e_y <- integral(Vectorize(function(x){g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
# pt dispersie, mai folosesc o data formula mediei functiilor de x
# pentru a afla X^2
e_y2 <- integral(Vectorize(function(x){x^2 * g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
dispersie <- e_y2 - e_y^2
dispersie2 <- integral(Vectorize(function(x){(x- e_y)^2}),domeniu_valori[1],domeniu_valori[2])
print(paste("Media: ",e_y))
print(paste("Dispersia:", dispersie))
print(paste("Dispersie2:", dispersie2))
}
# Example
f1 <- function(x)(x)
f2 <- function(x) (dnorm(x))
median_and_dispersion(f1,f2, c(0,Inf)) # 2, 20
library(pracma)
### Cerinta 6: Calculul mediei și dispersiei unei variabile aleatoare g(X), unde X are o repartiție continuă cunoscută
## iar g este o funcție continuă precizată de utilizator.
median_and_dispersion <- function(g, fx, domeniu_valori) {
# y = g(X) e o noua variabila aleatoare, ii calculez media
# folosesc formula pt media functiilor de x
e_y <- integral(Vectorize(function(x){g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
# pt dispersie, mai folosesc o data formula mediei functiilor de x
# pentru a afla X^2
e_y2 <- integral(Vectorize(function(x){x^2 * g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
dispersie <- e_y2 - e_y^2
dispersie2 <- integral(Vectorize(function(x){(x- e_y)^2}),domeniu_valori[1],domeniu_valori[2])
print(paste("Media: ",e_y))
print(paste("Dispersia:", dispersie))
print(paste("Dispersie2:", dispersie2))
}
# Example
f1 <- function(x)(1)
f2 <- function(x) (dnorm(x))
median_and_dispersion(f1,f2, c(0,Inf)) # 2, 20
library(pracma)
### Cerinta 6: Calculul mediei și dispersiei unei variabile aleatoare g(X), unde X are o repartiție continuă cunoscută
## iar g este o funcție continuă precizată de utilizator.
median_and_dispersion <- function(g, fx, domeniu_valori) {
# y = g(X) e o noua variabila aleatoare, ii calculez media
# folosesc formula pt media functiilor de x
e_y <- integral(Vectorize(function(x){g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
# pt dispersie, mai folosesc o data formula mediei functiilor de x
# pentru a afla X^2
e_y2 <- integral(Vectorize(function(x){x^2 * g(x) *fx(x)}),domeniu_valori[1],domeniu_valori[2])
dispersie <- e_y2 - e_y^2
dispersie2 <- integral(Vectorize(function(x){(x- e_y)^2}),domeniu_valori[1],domeniu_valori[2])
print(paste("Media: ",e_y))
print(paste("Dispersia:", dispersie))
print(paste("Dispersie2:", dispersie2))
}
# Example
f1 <- function(x)(x)
f2 <- function(x) (dnorm(x))
median_and_dispersion(f1,f2, c(0,Inf)) # 2, 20
